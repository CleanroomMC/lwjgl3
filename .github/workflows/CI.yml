# TODO: https://github.blog/changelog/2022-08-09-github-actions-the-ubuntu-18-04-actions-runner-image-is-being-deprecated-and-will-be-removed-by-12-1-22/
name: LWJGL Build

<<<<<<< HEAD
on: [workflow_dispatch]

env:
=======
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  JAVA_HOME: jdk8
>>>>>>> upstream/master
  ANT_OPTS: -Xmx2G
  LWJGL_BUILD_TYPE: nightly

jobs:
<<<<<<< HEAD
  linux-cross:
    name: Linux Cross
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [arm32, arm64]
        include:
          - ARCH: arm32
            PACKAGES: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross rename
            CROSS_ARCH: armhf
            CROSS_PACKAGES: libgtk-3-dev:armhf libatk-bridge2.0-dev:armhf libgdk-pixbuf2.0-dev:armhf libglu-dev:armhf libgl1-mesa-glx:armhf libx11-dev:armhf
            NATIVE_PARAMS: -Dgcc.libpath.opengl=/usr/lib/arm-linux-gnueabihf/mesa
          - ARCH: arm64
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross rename
            CROSS_ARCH: arm64
            CROSS_PACKAGES: libgtk-3-dev:arm64 libatk-bridge2.0-dev:arm64 libgdk-pixbuf2.0-dev:arm64 libglu-dev:arm64 libgl1-mesa-glx:arm64 libx11-dev:arm64
            NATIVE_PARAMS: -Dgcc.libpath.opengl=/usr/lib/aarch64-linux-gnu/mesa
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - run: |
          wget https://gist.github.com/hakerdefo/9c99e140f543b5089e32176fe8721f5f/raw/7ac6ccf882bb0d39297962f0baedce5721c9be65/sources.list
          sudo cp sources.list /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get -yq install ${{matrix.PACKAGES}}
        name: Install dependencies
      - run: ${PWD}/refactor/Linux.sh
        shell: bash
        name : Refactor to org.lwjgl3
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        name: Install JDK 17
      - run: |
          sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
          sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
          sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get clean
          sudo apt-get update || true
        name: Prepare cross-compilation
      - run: sudo apt-get -yq -f --allow-unauthenticated --no-install-suggests --no-install-recommends install ${{matrix.CROSS_PACKAGES}} -o Dpkg::Options::="--force-overwrite"
        name: Install cross-compilation dependencies
      - run: ant -emacs compile-templates clean-generated generate
        name: Hydrate generator
      - run: ant -emacs compile
        name: Build Java
      - run: ant -emacs compile-native ${{matrix.NATIVE_PARAMS}}
        name: Build native
      - run: |
          find ./bin/libs/native
        name : Try list natives files
      - uses: actions/upload-artifact@v3
        with:
          path: |
            bin/libs/native
        name: Linux-${{matrix.ARCH}}

  macos:
    name: macOS
=======
  check-kotlinc-cache:
    name: Check kotlinc cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Download JDK
        run: |
          mkdir jdk8
          curl https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Check generator hydration
        run: ant -emacs hydrate-kotlinc
        id: hydration
        continue-on-error: true
      - name: Cache kotlinc output
        run: |
          git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
          ANT_OPTS=-Xmx4G ant -emacs cache-kotlinc -Drevision="HEAD~2..HEAD~1"
        if: steps.hydration.outcome == 'failure'

  linux:
    name: Linux
    needs: check-kotlinc-cache
    runs-on: ubuntu-latest
    container:
      image: centos:7
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64]
        include:
          - ARCH: x64
    defaults:
      run:
        shell: bash
    steps:
      - name: Upgrade git
        run: |
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Configure yum
        run: |
          yum -y install epel-release
          yum -y update
      - name: Install build dependencies
        run: |
          yum -y install centos-release-scl
          yum -y install devtoolset-11-gcc-c++
          yum -y install ant awscli
      - name: Install LWJGL dependencies
        run: |
          yum -y install libX11-devel libXt-devel gtk3-devel libdbus-1-dev
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Hydrate generator
        run: |
          git config --global --add safe.directory $PWD
          ant -emacs hydrate-kotlinc clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: |
          source scl_source enable devtoolset-11 || true
          ant -emacs compile-native
      - name: Run tests
        run: |
          source scl_source enable devtoolset-11 || true
          ant -emacs tests
      - name: Upload artifacts
        run: |
          source scl_source enable devtoolset-11 || true
          ant -emacs upload-native

  linux-cross:
    name: Linux Cross
    needs: check-kotlinc-cache
    runs-on: ubuntu-latest
    container:
      image: ${{matrix.CONTAINER}}
    strategy:
      fail-fast: false
      matrix:
        ARCH: [arm32, arm64, ppc64le, riscv64]
        include:
          # ----
          - ARCH: arm32
            CROSS_ARCH: armhf
            CONTAINER: ubuntu:18.04
            TRIPLET: arm-linux-gnueabihf
            # ----
          - ARCH: arm64
            CROSS_ARCH: arm64
            CONTAINER: ubuntu:18.04
            TRIPLET: aarch64-linux-gnu
          # ----
          - ARCH: ppc64le
            CROSS_ARCH: ppc64el
            CONTAINER: ubuntu:18.04
            TRIPLET: powerpc64le-linux-gnu
          # ----
          - ARCH: riscv64
            CROSS_ARCH: riscv64
            CONTAINER: ubuntu:20.04
            TRIPLET: riscv64-linux-gnu
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    defaults:
      run:
        shell: bash
    steps:
      - name: Upgrade git
        run: |
          apt-get -y update
          apt-get -y install software-properties-common
          apt-get -y install --reinstall ca-certificates
          apt-get -y update
          apt-get -y upgrade
          add-apt-repository -y ppa:git-core/ppa
        if: ${{ matrix.CONTAINER == 'ubuntu:18.04' }}
      - run: |
          apt-get -y update
          apt-get install -y git
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          git config --global --add safe.directory $(pwd)
          DEBIAN_FRONTEND=noninteractive apt-get -yq install ant awscli curl gcc-${{matrix.TRIPLET}} g++-${{matrix.TRIPLET}} libc6-dev-${{matrix.CROSS_ARCH}}-cross
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Prepare cross-compilation for ${{matrix.CROSS_ARCH}}
        run: |
          sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
          grep "ubuntu.com/ubuntu" /etc/apt/sources.list | tee /etc/apt/sources.list.d/ports.list
          sed -i 's/amd64,i386/${{matrix.CROSS_ARCH}}/' /etc/apt/sources.list.d/ports.list
          sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          apt-get clean
          apt-get update || true
      - name: Install cross-compilation dependencies
        run: apt-get -yq -f --allow-unauthenticated --no-install-suggests --no-install-recommends install libgtk-3-dev:${{matrix.CROSS_ARCH}} libatk-bridge2.0-dev:${{matrix.CROSS_ARCH}} libgdk-pixbuf2.0-dev:${{matrix.CROSS_ARCH}} libglu-dev:${{matrix.CROSS_ARCH}} libgl1-mesa-glx:${{matrix.CROSS_ARCH}} libx11-dev:${{matrix.CROSS_ARCH}} libxt-dev:${{matrix.CROSS_ARCH}} libdbus-1-dev:${{matrix.CROSS_ARCH}} -o Dpkg::Options::="--force-overwrite"
      - name: Hydrate generator
        run: ant -emacs hydrate-kotlinc clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native -Dgcc.libpath.opengl=/usr/lib/${{matrix.TRIPLET}}/mesa
      - name: Upload artifacts
        run: ant -emacs upload-native

  freebsd-cross:
    name: FreeBSD Cross
    needs: check-kotlinc-cache
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
          fetch-tags: true
      - name: Install dependencies
        run: |
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-macosx_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Hydrate generator
        run: ant -emacs hydrate-kotlinc clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build, test and upload artifacts
        uses: cross-platform-actions/action@v0.21.1
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.2'
          memory: 8G
          shell: bash
          environment_variables: AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ANT_OPTS LWJGL_BUILD_TYPE
          run: |
            sudo pkg install -y git openjdk8 apache-ant devel/py-awscli gtk3 dbus
            git config --global --add safe.directory $PWD
            ant -emacs compile-native
            ant -emacs tests
            ant -emacs upload-native

  macos:
    name: macOS
    needs: check-kotlinc-cache
>>>>>>> upstream/master
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
<<<<<<< HEAD
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        name: Install JDK 17
      - run: |
          brew update
          brew install rename
        name: Install script dependency
      - run: ${PWD}/refactor/MacOS.sh
        shell: bash
        name : Refactor to org.lwjgl3
      - run: ant -emacs compile-templates clean-generated generate
        name: Hydrate generator
      - run: ant -emacs compile
        name: Build Java
      - run: ant -emacs compile-native
        name: Build native
      - run: ant -emacs tests
        name: Run tests
        if: contains(matrix.ARCH, 'arm') != true
      - uses: actions/upload-artifact@v3
        with:
          path: |
            bin/libs/native
        name: MacOS-${{matrix.ARCH}}

  windows:
    name: Windows
=======
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.72.0.17-ca-fx-jdk8.0.382-macosx_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Hydrate generator
        run: ant -emacs hydrate-kotlinc clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native
      - name: Run tests
        run: ant -emacs tests
        if: matrix.ARCH == 'x64'
      - name: Upload artifacts
        run: ant -emacs upload-native

  windows:
    name: Windows
    needs: check-kotlinc-cache
>>>>>>> upstream/master
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x86, x64, arm64]
        include:
          - ARCH: x86
<<<<<<< HEAD
            JDK: zulu8.68.0.21-ca-fx-jdk8.0.362-win_i686
            MSVC_ARCH: amd64_x86
          - ARCH: x64
            JDK: zulu8.68.0.21-ca-fx-jdk8.0.362-win_x64
            MSVC_ARCH: amd64
          - ARCH: arm64
            JDK: zulu8.68.0.21-ca-fx-jdk8.0.362-win_x64
            MSVC_ARCH: amd64_arm64
    env:
      ANT_OPTS: -Xmx2G
      JAVA_HOME: ${{matrix.JDK}}
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.MSVC_ARCH }}
      - run: git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
        name: Clone Oculus SDK
        if: contains(matrix.ARCH, 'arm') != true
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        name: Install JDK 17
      - run: .\refactor\Windows.ps1
        shell: pwsh
        name : Refactor to org.lwjgl3
      - run: ant -emacs compile-templates clean-generated generate
        shell: cmd
        name: Generate bindings
      - run: ant -emacs compile
        shell: cmd
        name: Build Java
      - run: ant -emacs compile-native
        shell: cmd
        name: Build native
      - uses: actions/upload-artifact@v3
        with:
          path: |
            .\bin\libs\native
        name: Windows-${{matrix.ARCH}}
  linux:
    name: Linux and everything
    needs: [linux-cross, macos, windows]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64]
        include:
          - ARCH: x64
            PACKAGES: libx11-dev libxt-dev libgtk-3-dev
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - run: |
          sudo apt-get update
          sudo apt-get -yq install ${{matrix.PACKAGES}} build-essential ant rename
        name: Install LWJGL dependencies
      - run: ${PWD}/refactor/Linux.sh
        shell: bash
        name : Refactor to org.lwjgl3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '8'
        name: Install JDK 8
      - run: echo $JAVA_HOME
        name: Print java home
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        name: Install JDK 17
      - run: |
          git config --global --add safe.directory $PWD
          ant -emacs compile-templates clean-generated generate
        name: Hydrate generator
      - run: ant -emacs compile
        name: Build Java
      - run: |
          ant -emacs compile-native
        name: Build native
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: bin/libs/native
      - name: Download custom glfw lib
        run: |
          wget https://github.com/CleanroomMC/glfw/releases/download/3.4.1/artifact.zip
          unzip -o artifact.zip -d bin/libs/native/
      - run: JAVA8_HOME=/opt/hostedtoolcache/Java_Zulu_jdk/8.0.362-9/x64 LWJGL_BUILD_OFFLINE=true ant -emacs release
        name: Try Releasing
      - run: |
          find ./bin/RELEASE
        name : List jar files
      - run: |
          ant -emacs tests
        name: Run tests
      - uses: actions/upload-artifact@v3
        with:
          path: |
            bin/RELEASE/
        name: Upload jars
=======
            JDK: zulu8.72.0.17-ca-fx-jdk8.0.382-win_i686
            MSVC_ARCH: amd64_x86
          - ARCH: x64
            JDK: zulu8.72.0.17-ca-fx-jdk8.0.382-win_x64
            MSVC_ARCH: amd64
          - ARCH: arm64
            JDK: zulu8.72.0.17-ca-fx-jdk8.0.382-win_x64
            MSVC_ARCH: amd64_arm64
    env:
      ANT_OPTS: -Xmx1G
      JAVA_HOME: ${{matrix.JDK}}
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.MSVC_ARCH }}
      - name: Clone Oculus SDK
        run: git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
        if: contains(matrix.ARCH, 'arm') != true
      - name: Install dependencies
        run: |
          Invoke-WebRequest https://cdn.azul.com/zulu/bin/${{matrix.JDK}}.zip -OutFile jdk.zip
          Expand-Archive -Path jdk.zip -DestinationPath .\
        shell: pwsh
      - name: Generate bindings
        run: ant -emacs hydrate-kotlinc clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native
      - name: Run tests
        run: ant -emacs tests
        if: contains(matrix.ARCH, 'arm') != true
      - name: Print test results
        run: type bin\test\testng-results.xml
        if: failure()
      - name: Upload artifacts
        run: ant -emacs upload-native
>>>>>>> upstream/master
